p(x) = number of acceptable attendance strings that do NOT forfiet

the strings can have at most 1 L, which leaves us with 1 or 0 L's

with 0 L's, there are 2^x different string combos.
however 2^(x-2) of these will have a triple A in them (however we take 2^0 in this case to be 0, as well as 2^(anything less than 0))
so our number of results is narrowed down to 2^x - 2^(x-2)
we will call this function comb(x);

with 1 L thrown in, we have X different positions for it. 
this means that there are always A positions on one side of the L and B positions on the other side, where A+B = X-1

this can be expressed with the sum from k = 0 to X-1 of comb(k)*comb(X-k-1)


this is expressed by the pseudocode:

pow(x,y)
{ // x^y
	if (y <= 0) return 0;lst = [1, 3, 0, 2, 1, 0, 0, 1]
while lst[0] < 30
  n, t, a, b, c, d, e, f = lst
  lst = [n + 1, 2 * t + b - a, c, 2 * b - a + d, t - (a + c), e, f, t]
end
	if (y == 1) return x;
	if (y%2 == 0) return pow(x*x, y/2);
	return pow(x, y-1) * x;	
}

comb(x)
{
	return pow(2, x) - pow(2, x-2);
}

p(x)
{
	sum = comb(x);
	for(i = 0; i < x; i++)
	{
		sum += (comb(i)*comb(x-i-1));
	}
}




package problems.p191;


public class Problem
{
	int[] i = {0, 0, 0, 1, 3, 8, 20, 47, 107, 238, 520, 1121, 2391, 5056, 10616, 22159, 46023, 95182, 196132, 402873, 825259, 1686408, 3438828, 6999071, 14221459, 28853662, 58462800, 118315137, 239186031, 483072832, 974791728, 1965486047};
	
	long pow(int x, int y)
	{ // x^y
		if (y <= 0) return 0;
		if (y == 1) return x;
		if (y%2 == 0) return pow(x*x, y/2);
		return pow(x, y-1) * x;	
	}
	
	long comb(int x)
	{
		return pow(2, x) - i[x];
	}
	
	void p(int x)
	{
		long sum = comb(x);
		for(int i = 0; i < x; i++)
		{
			sum += (comb(i)*comb(x-i-1));
		}
		System.out.println(sum);
	}
	
	public Problem()
	{
		p(4);
	}
}


NO


