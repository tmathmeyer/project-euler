PANDIGITALIS

start by saying 1+2+3+4+5+6+7+8+9 = 45, so anything with all of them is a multiple of 9 and therefore not prime
well that wont work, and since we need to include the 1, we must leave off the 1
but wait! that leaves us with a sum of 36. in fact, here's the table:

1+2+3+4+5+6+7+8+9 = 45
1+2+3+4+5+6+7+8   = 36
1+2+3+4+5+6+7     = 28
1+2+3+4+5+6		  = 21
1+2+3+4+5		  = 15
1+2+3+4  		  = 10
1+2+3 			  = 6
1+2 			  = 3
1 				  = 1

this looks like the greatest nuber of digits we can have is 7 or 4, but im willing to bet it's 7.

now let's look at the last digit:
it can be either a 1, 3, or 7


since the law of primes says that there about x/ln(x) primes less than or equal to x,
or approximately 482898 primes less than 7654321.
now if we subtract from that the approx. number of primes less than or equal to 1000000, we get approx. 410516 primes with 7 digits
and less than 7654321

now we can approximate the number of primes between 7654321 and 7000000, which ends up being [654321/(7654321-1000000)] * 410516
or: 40366 primes.

out of these, what are the chances that none of them have duplicate digits? easy, we have 6/10 * 5/10 * .. * 1/10,
or 6! / 10^6

now how many does that leave? 40366*6! / 10^6 is approximately 29.
so the chances that there is a prime here is almost certain for us. YAY!
now we can do the same procedure again, as follows:

# primes between 7600000 and 7654321 is approximately 3211

now again the chance that there are no duplicated digits is 3211 * (5/10 * .. * 1/10)
or 3211*5!/10^5, which is approximately 4. still good above 1, so i like it. 


however at the next step, we get an approximate value of .612!
now we can use this as a chance to permute.
so far, we are pretty certain that there is definitely a prime (actually at least 3 of them) between 7,600,000 and 7,654,321
that fit our criteria of no duplicate digits

this has brought our computation from generating a sieve of the first 987654321 primes, to generating only a sieve up to 
7654321 (not bad)
more importantly though, we only start looking for primes between 7612345 and 7654321 now to fit our criteria

so here we can now put some pseudo code: 

int[] primes = permute(5,4,3,2,1);
for each prime p
	if isPrime(7600000+p)
		return p+7600000;

for the prime method, check prime.txt or prime.java
I'm also not going to bother to write out a permuter, because it's late, and I have things to do tomorrow because i actually have a life, what a shock

suffice to say that this has a miniscue runtime, in fact, a permuter should be order of n! which sounds bad, but for this example, 5! is MUCH smaller than 8 millionish (i mean, 120, vs, 8000000... you *should* be able to math if you're reading this)
the prime checker uses fermat's little theorum to achieve a runtime of O((log(n))^2) where n is the order of 10s magnitude of the number tested, which is fantastic (and less than O(sqrt(n)).)

since each of these are 7 digits, we can assert that the total runtime will be at WORST 120*(log_2(7))^2, or about 950 operations. holy shit that's fast :D

after testing this, it turns out we were correct, and the answer is: 7652413